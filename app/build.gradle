import io.gitlab.arturbosch.detekt.Detekt

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}
apply from: "$rootDir/plugins/android-build.gradle"
apply from: "$rootDir/plugins/test-build.gradle"
apply from: "$rootDir/config/detekt/detekt-build.gradle"

android {
    namespace Config.applicationId
    signingConfigs {
        release {
            // Implements keyStore for release version
        }
    }
    defaultConfig {
        applicationId Config.applicationId

        buildConfigField "String", "DB_NAME", '"book.db"'
    }

    buildTypes {
        debug {
            debuggable true
            applicationIdSuffix '.debug'
        }
        preprod {
            initWith debug
            minifyEnabled true
            applicationIdSuffix '.preprod'
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    "$rootDir/app/proguard-rules.pro",
                    "$rootDir/app/proguard-rules-staging.pro"
        }
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    "$rootDir/app/proguard-rules.pro",
                    "$rootDir/app/proguard-rules-staging.pro"
        }
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    tasks.withType(Detekt).configureEach { detekt ->
        reports {
            xml.required.set(false)
            html.required.set(true)
            txt.required.set(false)
            sarif.required.set(false)
            md.required.set(false)
        }
    }
}

dependencies {
    // Libs
    debugImplementation(Libs.soLoader)
    debugImplementation(Libs.flipper)
    debugImplementation(Libs.flipperNetwork)
    debugImplementation(Libs.leakcanary2)
    debugImplementation(Libs.leakcanaryAndroid)
    implementation(Libs.okhttpLoggingInterceptor)
    implementation(Libs.shimmer)
    implementation(Libs.pagingRuntime)
    implementation(Libs.pagingRxJava2)
    implementation(Libs.roomRxJava2)
    implementation(Libs.roomRuntime)
    implementation(Libs.roomKtx)
    kapt(Libs.roomKapt)

    // Modules
    implementation project(Modules.design)
    implementation project(Modules.arch)
}
